# Visit our schema definition for additional information on this file format
# https://github.com/newrelic/open-install-library/blob/main/docs/recipe-spec/recipe-spec.md#schema-definition

name: dotnet-agent-installer
displayName: .NET Agent Installer
description: New Relic install recipe for .NET application on Windows
repository: https://github.com/newrelic/newrelic-dotnet-agent

installTargets:
  - type: application
    os: windows

keywords:
  - Apm
  - .NET
  - dotnet
  - aspnet
  - core

processMatch:
  - w3wp.exe

validationNrql: "SELECT count(*) from Transaction WHERE host like '{{.HOSTNAME}}%' facet entityGuid since 10 minutes ago"

successLinkConfig:
  type: EXPLORER
  filter: '"`tags.language` = ''dotnet''"'

install:
  version: "3"
  silent: true

  tasks:
    default:
      cmds:
        - task: verify_continue
        - task: assert_admin_perms
        - task: assert_pre_req
        - task: stop
        - task: remove_any_previous
        - task: install
        - task: configure
        - task: start
        - task: ensure_sites_started

    verify_continue:
      cmds:
        - |
          powershell -command '
          Write-Host ""
          Write-Host -ForegroundColor Yellow "================================================================================"
          Write-Host -ForegroundColor Yellow "=                                                                              ="
          Write-Host -ForegroundColor Yellow "=                                   Warning                                    ="
          Write-Host -ForegroundColor Yellow "=                                                                              ="
          Write-Host -ForegroundColor Yellow "=       This installation will automatically restart IIS upon completion.      ="
          Write-Host -ForegroundColor Yellow "=                                                                              ="
          Write-Host -ForegroundColor Yellow "================================================================================"
          Write-Host ""
          Write-Host "If you are not hosting your .NET application using IIS please see our other installation options:"
          Write-Host "https://docs.newrelic.com/docs/agents/net-agent/installation/install-net-agent-windows/."
          Write-Host ""
          # If NEW_RELIC_ASSUME_YES is set to true, will not prompt input URL
          $NEW_RELIC_ASSUME_YES = "{{.NEW_RELIC_ASSUME_YES}}"
          if ($NEW_RELIC_ASSUME_YES -ieq "false") {
            WHILE ($true) {
              Write-Host "Do you want to install the .NET Agent Y/N (default: Y)? " -NoNewLine
              $NEW_RELIC_CONTINUE = $Host.UI.ReadLine()
              if ([string]::IsNullOrWhiteSpace($NEW_RELIC_CONTINUE))
              {
                $NEW_RELIC_CONTINUE = "y"
              }

              if ($NEW_RELIC_CONTINUE -ieq "n") {
                Write-Host "Exiting the installation..."
                exit 130 # often used to represent Ctrl+C.
              }
              elseif ($NEW_RELIC_CONTINUE -ieq "y") {
                Write-Host "Starting installation of the New Relic .NET Agent..."
                break
              }

              Write-Host "Please type y or n only."
            }
          }
          '
    assert_admin_perms:
      cmds:
        - |
          powershell -command '
          $currentPrincipal = New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())
          if (! $currentPrincipal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
            Write-Host -ForegroundColor Red "The installation recipe for the .NET Agent on Windows must be run with Administrator permissions."
            exit 7
          }
          '

    assert_pre_req:
      cmds:
        - |
          powershell -command '
          $iisEnabled = Get-WindowsOptionalFeature -Online -FeatureName IIS-WebServer | select State
          if ($iisEnabled.State -ne "Enabled") {
            Write-Host -ForegroundColor Red "IIS is not installed."
            exit 5
          }

          $aspNet45Enabled = Get-WindowsOptionalFeature -Online -FeatureName IIS-ASPNET45 | select State
          if ($aspNet45Enabled.State -ne "Enabled") {
            Write-Host -ForegroundColor Red "ASP.NET is not installed."
            exit 6
          }
          '

    stop:
      cmds:
        - |
          powershell -command '
          iisreset /stop | Out-Null
          '

    remove_any_previous:
      ignore_error: true
      cmds:
        - |
          powershell -command '
          function Find-UninstallGuids {
            param (
              [Parameter(Mandatory)]
              [string]$Match
            )

            $baseKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $wowKeys = Get-ChildItem -Path HKLM:\SOFTWARE\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall `
            | % { $_.Name.TrimStart("HKEY_LOCAL_MACHINE\") }

            $allKeys = $baseKeys + $wowKeys

            $uninstallIds = New-Object System.Collections.ArrayList
            foreach ($key in $allKeys) {
              try {
                $keyData = Get-Item -Path HKLM:\$key -ErrorAction SilentlyContinue
                $name = $keyData.GetValue("DisplayName")
                if ($name -and $name -match $Match) {
                  $keyId = Split-Path $key -Leaf
                  $uninstallIds.Add($keyId) | Out-Null
                }
              }
              catch {}
            }

            if ($uninstallIds.Count -eq 0) {
              return @()
            }

            return $uninstallIds
          }

          $uninstallIds = Find-UninstallGuids -Match "New Relic .NET Agent"
          foreach ($uninstallId in $uninstallIds) {
            try {
              $uninstallCommand = "msiexec /x """ + $uninstallId + """ /qn"
              Invoke-Expression $uninstallCommand -ErrorAction SilentlyContinue | Out-Null
              # wait here to allow uninstall command to complete since it returns without waiting
              Start-Sleep -s 15
            }
            catch {}
          }
          '

    install:
      cmds:
        - |
          powershell -command '
          [Net.ServicePointManager]::SecurityProtocol = "tls12, tls"
          (New-Object System.Net.WebClient).DownloadFile("https://download.newrelic.com/dot_net_agent/latest_release/NewRelicDotNetAgent_x64.msi", "$env:TEMP\NewRelicDotNetAgent_x64.msi")
          msiexec.exe /qn /i "$env:TEMP\NewRelicDotNetAgent_x64.msi" NR_LICENSE_KEY={{.NEW_RELIC_LICENSE_KEY}} | Out-Null
          '
        - echo "New Relic .NET agent installed"

    configure:
      cmds:
        - |
          powershell -command '
          $configPath = "$env:ProgramData\New Relic\.NET Agent\newrelic.config"
          $file = Resolve-Path("$configPath")
          $xdoc = New-Object System.Xml.XmlDocument
          $xdoc.PreserveWhitespace = $true
          $xdoc.Load($file)
          if ($xdoc.GetElementsByTagName("application")[0].HasChildNodes) {
            $xdoc.configuration.application.RemoveAll()
          }
          if ("{{.NEW_RELIC_REGION}}" -like "STAGING") {
            $xdoc.configuration.service.SetAttribute("host", "staging-collector.newrelic.com")
          }
          if ($xdoc.GetElementsByTagName("distributedTracing")[0]) {
            $xdoc.configuration.distributedTracing.SetAttribute("enabled", "true")
            $xdoc.configuration.distributedTracing.SetAttribute("excludeNewrelicHeader", "false")
          }
          else {
            $child = $xdoc.CreateElement("distributedTracing", "urn:newrelic-config")
            $child.SetAttribute("enabled", "true")
            $child.SetAttribute("excludeNewrelicHeader", "false")
            $xdoc.configuration.AppendChild($child) | Out-Null
          }
          $xdoc.Save($configPath)
          '
        - echo "New Relic .NET agent configured"

    start:
      cmds:
        - |
          powershell -command '
          iisreset /start | Out-Null
          '

    ensure_sites_started:
      ignore_error: true
      cmds:
        - |
          powershell -command '
          Write-Host ""
          Write-Host -ForegroundColor Yellow "================================================================================"
          Write-Host -ForegroundColor Yellow "=                                                                              ="
          Write-Host -ForegroundColor Yellow "=                                  Important                                   ="
          Write-Host -ForegroundColor Yellow "=                                                                              ="
          Write-Host -ForegroundColor Yellow "=    Your application needs to be sent traffic to validate the installation.   ="
          Write-Host -ForegroundColor Yellow "=                                                                              ="
          Write-Host -ForegroundColor Yellow "=         Please send approximately 3 requests to your application or          ="
          Write-Host -ForegroundColor Yellow "=       enter the application URL and this tool will send the requests.        ="
          Write-Host -ForegroundColor Yellow "=                                                                              ="
          Write-Host -ForegroundColor Yellow "================================================================================"
          Write-Host ""

          # If NEW_RELIC_ASSUME_YES is set to true, will not prompt for input
          $NEW_RELIC_ASSUME_YES = "{{.NEW_RELIC_ASSUME_YES}}"
          if ($NEW_RELIC_ASSUME_YES -ieq "false") {
            Write-Host "Press ENTER to skip or type URL and press ENTER to continue? " -NoNewLine
            $NEW_RELIC_IIS_URL = $Host.UI.ReadLine()
            Write-Host ""
          }

          Write-Host "Sending requests to your applications..."
          if ($NEW_RELIC_IIS_URL) {
            Write-Host $NEW_RELIC_IIS_URL
            while($val -ne 3) {
              try {
                $val++
                Invoke-WebRequest -UseBasicParsing -Method Get -TimeoutSec 5 -Uri $NEW_RELIC_IIS_URL -ErrorAction SilentlyContinue | Out-Null
              }
              catch {}
            }
          }

          try {
            Get-WebURL "IIS:\Sites\*" | ForEach-Object { Write-Host $_.ResponseUri.AbsoluteUri }
          }
          catch {}
          Write-Host "Finished sending requests."
          '
